exit
continue
conttinue
data
next
prefix
next
key
next
continue
dict.pairs_and_languages(lang_code).last
dict.pairs_and_languages(lang_code)
dict.pairs_and_languages
lang_code
dict
continue
method
continue
exit
continue
exit
continue
Word.new
@word
exit
puts methods.sort
puts methods
instance_methods
methods
exit
__method__
exit
TranslatorHelper.const_get(params[:name].capitalize)::Translator.languages
TranslatorHelper.const_get(params[:name].capitalize)::Dictionary
TranslatorHelper.const_get(params[:name].capitalize).Dictionary
TranslatorHelper.const_get(params[:name].capitalize).translate
TranslatorHelper.const_get(params[:name].capitalize).languages
TranslatorHelper.const_get params[:name].capitalize
TranslatorHelper.get_const
TranslatorHelper
TranslatorHelper.get_const params[:name].capitalize
Object.get_const params[:name].capitalize
TranslatorHelper.get_const params[:name].capitalize
TranslatorHelper.send params[:name].capitalize
TranslatorHelper.send params[:name].capitalize.constantize
params[:name].capitalize.constantize
params[:name].constantize
params[:name].capitalize.classify.transalte
params[:name].capitalize.classify
params[:name].capitalize
params[:name]
p n
n
n = params[:name]
exit
eit
exit
continue
 valid_data.merge({k => nil})
 valid_data.merge({k.to_sym => nil})
 valid_data.merge({k.to_sym: nil})
 valid_data.merge({k: nil})
{k: nil}
Hash.new([k, nil])
Hash.new({k: nil})
 valid_data.merge(Hash.new({k: nil}))
